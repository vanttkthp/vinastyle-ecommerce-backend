// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 1. User
model User {
  userId           String    @id @default(cuid())
  email            String    @unique
  firstName        String?
  lastName         String?
  password         String
  phoneNumber      String?
  avatar           String?
  gender           Gender?
  addresses        Address[]
  wishlist         Wishlist?
  orders           Order[]
  verificationCode String?
  isVerified       Boolean   @default(false)
  isActive         Boolean?  @default(true)
  roleName         RoleName  @default(CUSTOMER)
  role             Role      @relation(fields: [roleName], references: [roleName])
  reviews          Review[]
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  @@map("users")
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

// 2. Role
model Role {
  roleId      Int      @id @default(autoincrement())
  roleName    RoleName @unique
  description String?
  users       User[]
  isActive    Boolean? @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String?
  updatedBy   String?

  @@map("roles")
}

enum RoleName {
  ADMIN
  STAFF
  CUSTOMER
}

// 3. Address

model Address {
  addressId     String     @id @default(cuid())
  addressDetail String
  country       String     @default("Viet Nam")
  city          String
  district      String
  ward          String
  street        String?
  houseNumber   String?
  postalCode    String?
  userId        String
  isActive      Boolean?   @default(true)
  user          User       @relation(fields: [userId], references: [userId])
  shipments     Shipment[]
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  @@map("addresses")
}

enum City {
  HANOI
  HAIPHONG
  THANHHOA
  NAMDINH
}

// 4. Product
model Product {
  productId       String           @id @default(cuid())
  name            String
  description     String
  price           Float
  categoryId      String
  category        Category         @relation(fields: [categoryId], references: [categoryId])
  subCategoryId   String
  subCategory     SubCategory      @relation(fields: [subCategoryId], references: [subCategoryId])
  brandId         String
  brand           Brand            @relation(fields: [brandId], references: [brandId])
  isActive        Boolean?         @default(true)
  productVariants ProductVariant[]
  images          Image[]
  reviews         Review[]
  createdAt       DateTime?        @default(now())
  updatedAt       DateTime?        @updatedAt
  createdBy       String?
  updatedBy       String?

  @@map("products")
}

// 5. Category
model Category {
  categoryId    String        @id @default(cuid())
  name          String
  description   String?
  products      Product[]
  subCategories SubCategory[]
  forMale       Boolean       @default(true)
  forFeMale     Boolean       @default(true)
  unisex        Boolean       @default(true)
  isActive      Boolean?      @default(true)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  createdBy     String?
  updatedBy     String?

  @@map("categories")
}

model SubCategory {
  subCategoryId String    @id @default(cuid())
  name          String
  description   String?
  categoryId    String
  category      Category  @relation(fields: [categoryId], references: [categoryId])
  products      Product[]
  isActive      Boolean?  @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  createdBy     String?
  updatedBy     String?

  @@map("sub_categories")
}

// 6. Brand
model Brand {
  brandId     String    @id @default(cuid())
  name        String
  description String?
  logo        String?
  products    Product[]
  isActive    Boolean?  @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  createdBy   String?
  updatedBy   String?

  @@map("brands")
}

// 7. Product Variant
model ProductVariant {
  productVariantId String      @id @default(cuid())
  productId        String
  product          Product     @relation(fields: [productId], references: [productId])
  sizeId           String
  size             Size        @relation(fields: [sizeId], references: [sizeId])
  stock            Int
  SKU              String
  soldQuantity     Int         @default(0)
  orderItem        OrderItem[]
  wishlists        Wishlist[]
  colorId          String
  color            Color       @relation(fields: [colorId], references: [colorId])
  isActive         Boolean?    @default(true)
  createdAt        DateTime?   @default(now())
  updatedAt        DateTime?   @updatedAt
  createdBy        String?
  updatedBy        String?

  @@map("product_variants")
}

model Size {
  sizeId          String           @id @default(cuid())
  sizeType        SizeType
  productVariants ProductVariant[]
  isActive        Boolean?         @default(true)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  createdBy       String?
  updatedBy       String?

  @@map("sizes")
}

// 7. Color
model Color {
  colorId         String           @id @default(cuid())
  productVariants ProductVariant[]
  name            String[]
  hexCode         String[]
  description     String?
  isActive        Boolean?         @default(true)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  createdBy       String?
  updatedBy       String?

  @@map("colors")
}

enum SizeType {
  XS
  S
  M
  L
  XL
  XXL
  XXXL
  A39
  A40
  A41
}

// 9. Wishlist
model Wishlist {
  wishlistId       String         @id @default(cuid())
  user             User           @relation(fields: [userId], references: [userId])
  userId           String         @unique
  productVariantId String
  productVariant   ProductVariant @relation(fields: [productVariantId], references: [productVariantId])
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  @@map("wishlists")
}

// 10. Order
model Order {
  orderId        String      @id @default(cuid())
  userId         String?
  user           User?       @relation(fields: [userId], references: [userId])
  orderItems     OrderItem[]
  totalPrice     Float
  orderDate      DateTime    @default(now())
  status         OrderStatus @default(IN_CART)
  totalAmount    Float
  discountAmount Float       @default(0)
  shipmentId     String?
  shipment       Shipment?   @relation(fields: [shipmentId], references: [shipmentId])
  paymentId      String?
  payment        Payment?    @relation(fields: [paymentId], references: [paymentId])
  isActive       Boolean?    @default(true)
  note           String?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  @@map("orders")
}

enum OrderStatus {
  IN_CART
  PENDING
  SHIPPING
  DELIVERED
  CANCELLED
}

// 11. Order Item
model OrderItem {
  orderItemId      String         @id @default(cuid())
  orderId          String
  order            Order          @relation(fields: [orderId], references: [orderId])
  quantity         Int
  total            Float
  productVariantId String
  productVariant   ProductVariant @relation(fields: [productVariantId], references: [productVariantId])
  isActive         Boolean?       @default(true)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  @@map("order_items")
}

// 12. Shipment
model Shipment {
  shipmentId            String         @id @default(cuid())
  shipmentMethod        ShipmentMethod @default(SHIPMENT)
  orders                Order[]
  shipmentDate          DateTime       @default(now())
  status                ShipmentStatus @default(PENDING)
  estimatedDeliveryDate DateTime? // Ngày giao hàng dự kiến (có thể null nếu chưa xác định)
  estimatedCost         Float? // Chi phí dự kiến cho giao hàng
  addressId             String
  address               Address        @relation(fields: [addressId], references: [addressId])
  isActive              Boolean?       @default(true)
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt

  @@map("shipments")
}

enum ShipmentMethod {
  SHIPMENT
  PICKUP
  EXPRESS
  COURIER
}

enum ShipmentStatus {
  PENDING
  SHIPPING
  DELIVERED
  CANCELLED
}

// 13. Payment
model Payment {
  paymentId     String        @id @default(cuid())
  paymentDate   DateTime      @default(now())
  paymentMethod PaymentMethod @default(COD)
  orders        Order[]
  amount        Float
  status        PaymentStatus @default(PENDING)
  isActive      Boolean?      @default(true)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@map("payments")
}

enum PaymentMethod {
  MOMO
  ZALO
  COD
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
  CANCELLED
}

model Image {
  imageId       String    @id @default(cuid())
  featureVector Json?
  imageURL      String
  productId     String
  product       Product   @relation(fields: [productId], references: [productId]) // Relation to ProductVariant
  colorName     String?
  category      String?
  createdAt     DateTime? @default(now())
  updatedAt     DateTime? @updatedAt

  @@map("images")
}

enum ReviewStatus {
  PENDING
  APPROVED
  REJECTED
}

model Review {
  reviewId  String       @id @default(cuid())
  userId    String
  user      User         @relation(fields: [userId], references: [userId])
  productId String
  product   Product      @relation(fields: [productId], references: [productId])
  rating    Int   
  comment   String?
  images    String[]     @default([])
  status    ReviewStatus @default(PENDING)
  createdAt DateTime?    @default(now())
  updatedAt DateTime?    @updatedAt

  @@map("reviews")
}
